#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent
* Repos
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC
* org-mode
  #+BEGIN_SRC emacs-lisp
    (use-package org
      :ensure t
      :pin org)

    ;; Set TODO-like keywords
    (setq org-todo-keywords
          '((sequence "TODO" "STARTED" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))

    (setq org-confirm-babel-evaluate nil)

    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

    (setq org-src-fontify-natively t)
  #+END_SRC
* Auto-complete
  #+BEGIN_SRC emacs-lisp
    (use-package auto-complete 
      :ensure t
      :init
      (progn
        (ac-config-default)
        (global-auto-complete-mode t)
        ))
  #+END_SRC
* Jedi
  #+BEGIN_SRC emacs-lisp
    (use-package jedi
      :ensure t)

    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup)
  #+END_SRC
* Interface tweaks
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* Which key
  Brings up some help
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
	:ensure t 
	:config
	(which-key-mode))
  #+END_SRC

* Swiper / Ivy / Counsel
  Swiper gives us a really efficient incremental search with regular expressions
  and Ivy / Counsel replace a lot of ido or helms completion functionality
  #+BEGIN_SRC emacs-lisp
    (use-package counsel
      :ensure t
      :bind
      (("M-y" . counsel-yank-pop)
       :map ivy-minibuffer-map
       ("M-y" . ivy-next-line)))

    (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "%d/%d ")
      (setq ivy-display-style 'fancy))

    (use-package swiper
      :ensure t
      :bind (("C-s" . swiper-isearch)
             ("C-r" . swiper-isearch)
             ("C-c C-r" . ivy-resume)
             ("M-x" . counsel-M-x)
             ("C-x C-f" . counsel-find-file))
      :config
      (progn
        (ivy-mode 1)
        (setq ivy-use-virtual-buffers t)
        (setq ivy-display-style 'fancy)
        (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
  #+END_SRC

* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))

  #+END_SRC

* Yasnippet
  #+BEGIN_SRC emacs-lisp
	(use-package yasnippet
	  :ensure t
	  :init
	    (yas-global-mode 1))

					    ;    (use-package yasnippet-snippets
					    ;      :ensure t)
  #+END_SRC

* iBuffer
#+BEGIN_SRC emacs-lispp
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
**
* Personal keymap
  #+BEGIN_SRC emacs-lisp
    ;; Bind C-c C-b to ibuffer
    (global-set-key (kbd "C-x C-b") 'ibuffer)

    ;; Bind compile F5
    (global-set-key (kbd "<f5>") 'compile)

    ;; Bind recompile F6
    (global-set-key (kbd "<f6>") 'recompile)

    ;; Bind recompile F7
    (global-set-key (kbd "<f7>") 'gdb)

  #+END_SRC
* All the icons

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons 
:ensure t
:defer 0.5)

(use-package all-the-icons-ivy
:ensure t
  :after (all-the-icons ivy)
  :custom (all-the-icons-ivy-buffer-commands '(ivy-switch-buffer-other-window ivy-switch-buffer))
  :config
  (add-to-list 'all-the-icons-ivy-file-commands 'counsel-dired-jump)
  (add-to-list 'all-the-icons-ivy-file-commands 'counsel-find-library)
  (all-the-icons-ivy-setup))


(use-package all-the-icons-dired
:ensure t
)

(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

#+END_SRC
* PlantUML
  #+BEGIN_SRC emacs-lisp
    (use-package plantuml-mode
      :ensure t)

    (setq plantuml-jar-path (expand-file-name "~/.emacs.d/plantuml.jar"))
  #+END_SRC
** Plantuml org integration
   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '(;; other Babel languages
	(plantuml . t)))

     (setq org-plantuml-jar-path
	   (expand-file-name "~/.emacs.d/plantuml.jar"))

     (setq org-babel-default-header-args:plantuml
	   '((:results . "file")
	     (:exports . "results")
	     (:java . "-Dfile.encoding=UTF-8 -Djava.awt.headless=true")))
   #+END_SRC
* CMake
  #+BEGIN_SRC emacs-lisp
    (use-package cmake-mode
      :ensure t)
  #+END_SRC
* Doxymacs
  #+BEGIN_SRC emacs-lisp
    (require 'doxymacs)
    (add-hook 'c-mode-common-hook'doxymacs-mode)
  #+END_SRC
* Gist
  #+BEGIN_SRC emacs-lisp
    (use-package gist
      :ensure t)
  #+END_SRC

* Magit
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :init
      (progn
        (bind-key (kbd "<f9>") 'magit-status)))
  #+END_SRC
* Powerline
  #+BEGIN_SRC emacs-lisp
    (use-package powerline
      :ensure t
      :init
      (setq powerline-default-separator 'curve
            powerline-default-separator-dir (quote (left . right))
            powerline-height 28
            powerline-display-buffer-size nil
            powerline-display-hud nil
            powerline-display-mule-info nil
            powerline-gui-use-vcs-glyph t
            powerline-inactive1 '((t (:background "grey11" :foreground "#c5c8c6")))
            powerline-inactive2 '((t (:background "grey20" :foreground "#c5c8c6")))))

    (powerline-center-theme)
  #+END_SRC
* Misc configurations
  #+BEGIN_SRC emacs-lisp
  ;; Disable menu-bar
  (menu-bar-mode -1)  
  #+END_SRC

