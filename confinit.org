#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent
* Repos
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
(setq org-latex-prefer-user-labels t)
#+END_SRC
* org-mode
** Basic org
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :ensure t
       :pin org)

        (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC
** org-customizations
   #+BEGIN_SRC emacs-lisp

      ;; Set TODO-like keywords
      (setq org-todo-keywords
	    '((sequence "TODO" "STARTED" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))
      ;; Don't ask confirmation for babel snippets execution. Particularly useful for
      ;; creating presentations.
      (setq org-confirm-babel-evaluate nil)

      ;; Fontify native code inside code blocks in org
      (setq org-src-fontify-natively t)

      ;; Org src tab acts natiely
      (setq org-src-tab-acts-natively t)

      ;; Recursively open agenda
      (load-library "find-lisp")
      (setq org-agenda-files
	    (find-lisp-find-files "~/Nextcloud/" "\.org$"))

      ;; Archive file based on week
      (setq org-archive-location (concat "~/Nextcloud/org-archive/archive-"
					 (format-time-string "%Y_%m_%W" (current-time))
					 ".org_archive::"))

      ;; Add babel languages
      (org-babel-do-load-languages
       'org-babel-load-languages
       '(
	 (plantuml . t)
	 (shell . t)
	 (python . t)
	 (latex . t)))

      (setcar (nthcdr 4 org-emphasis-regexp-components) 3)
      (org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)

      ;; Org links
      ;; have a look at the documentation for extra configuration files needed
      (setq org-html-validation-link nil)  ;; removes validation link from exported html file
      (require 'org-protocol)
      (setq org-capture-templates
	      '(
		("o" "Link capture" entry
		 (file+headline "~/Nextcloud/org-linkz/Linkz.org" "INBOX")
		 "* %a %U"
		 :immediate-finish t)
      ))
      (setq org-protocol-default-template-key "o")

     ;; Bind C-c b to bookmarks file
     (defun bookmarks-visit ()
       (interactive)
       (find-file "~/Nextcloud/org-linkz/Linkz.org"))
     (global-set-key (kbd "C-c b") 'bookmarks-visit)

     ;; Redraw images on execute
     (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
#+END_SRC
** org-re-veal
   #+begin_src emacs-lisp
     (use-package ox-reveal
       :ensure t)

     (setq org-reveal-root "file:///home/aure/src/reveal.js")
   #+end_src
* Auto-complete
  #+BEGIN_SRC emacs-lisp
    (use-package auto-complete 
      :ensure t
      :init
      (progn
        (ac-config-default)
        (global-auto-complete-mode t)
        ))
  #+END_SRC
* Jedi
  #+BEGIN_SRC emacs-lisp
    (use-package jedi
      :ensure t)

    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup)
  #+END_SRC
* Interface tweaks
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* Which key
  Brings up some help
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
	:ensure t 
	:config
	(which-key-mode))
  #+END_SRC

* Swiper / Ivy / Counsel
  Swiper gives us a really efficient incremental search with regular expressions
  and Ivy / Counsel replace a lot of ido or helms completion functionality
  #+BEGIN_SRC emacs-lisp
    (use-package counsel
      :ensure t
      :bind
      (("M-y" . counsel-yank-pop)
       :map ivy-minibuffer-map
       ("M-y" . ivy-next-line)))

    (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "%d/%d ")
      (setq ivy-display-style 'fancy))

    (use-package swiper
      :ensure t
      :bind (("C-s" . swiper-isearch)
             ("C-r" . swiper-isearch)
             ("C-c C-r" . ivy-resume)
             ("M-x" . counsel-M-x)
             ("C-x C-f" . counsel-find-file))
      :config
      (progn
        (ivy-mode 1)
        (setq ivy-use-virtual-buffers t)
        (setq ivy-display-style 'fancy)
        (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
  #+END_SRC

* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))

  #+END_SRC

* Yasnippet
  #+BEGIN_SRC emacs-lisp
	(use-package yasnippet
	  :ensure t
	  :init
	    (yas-global-mode 1))

					    ;    (use-package yasnippet-snippets
					    ;      :ensure t)
  #+END_SRC

* Yaml-mode
  #+BEGIN_SRC emacs-lisp
    (use-package yaml-mode
      :ensure t)      
  #+END_SRC
* iBuffer
#+BEGIN_SRC emacs-lispp
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
**
* Personal keymap
  #+BEGIN_SRC emacs-lisp
    ;; Bind C-c C-b to ibuffer
    (global-set-key (kbd "C-x C-b") 'ibuffer)

    ;; Bind compile F5
    (global-set-key (kbd "<f5>") 'compile)

    ;; Bind recompile F6
    (global-set-key (kbd "<f6>") 'recompile)

    ;; Bind recompile F7
    (global-set-key (kbd "<f7>") 'gdb)

    ;; Bind C-c a to org Agenda
    (global-set-key (kbd "C-c a") 'org-agenda)

    ;; Bind C-c c to configuration file
    (defun config-visit ()
      (interactive)
      (find-file "~/.emacs.d/confinit.org"))
    (global-set-key (kbd "C-c c") 'config-visit)
#+END_SRC
* Open password file
  #+begin_src emacs-lisp
    (defun kpcli-console ()
      "Runs kpcli and opens password file."
      (interactive)
      (require 'term)
      (let* ((cmd "kpcli")
	     (args "--kdb=/home/aure/Nextcloud/pdb2.kdbx")
	     (switches (split-string-and-unquote args))
	     (termbuf (apply 'make-term "kpcli console" cmd nil switches)))
	(set-buffer termbuf)
	(term-mode)
	(term-char-mode)
	(switch-to-buffer termbuf)))

    (global-set-key (kbd "C-c p") 'kpcli-console)
  #+end_src
* All the icons

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons 
:ensure t
:defer 0.5)

(use-package all-the-icons-ivy
:ensure t
  :after (all-the-icons ivy)
  :custom (all-the-icons-ivy-buffer-commands '(ivy-switch-buffer-other-window ivy-switch-buffer))
  :config
  (add-to-list 'all-the-icons-ivy-file-commands 'counsel-dired-jump)
  (add-to-list 'all-the-icons-ivy-file-commands 'counsel-find-library)
  (all-the-icons-ivy-setup))

#+END_SRC
* PlantUML
  #+BEGIN_SRC emacs-lisp
    (use-package plantuml-mode
      :ensure t)

    (setq plantuml-jar-path (expand-file-name "~/.emacs.d/plantuml.jar"))

    (setq org-babel-default-header-args:plantuml
	  '((:results . "file")
	    (:exports . "results")
		(:java . "-Dfile.encoding=UTF-8 -Djava.awt.headless=true")))
  #+END_SRC
** Plantuml org integration
   #+BEGIN_SRC emacs-lisp
     (setq org-plantuml-jar-path
	   (expand-file-name "~/.emacs.d/plantuml.jar"))

     (setq org-babel-default-header-args:plantuml
	   '((:results . "file")
	     (:exports . "results")
	     (:java . "-Dfile.encoding=UTF-8 -Djava.awt.headless=true")))
   #+END_SRC
* CMake
  #+BEGIN_SRC emacs-lisp
    (use-package cmake-mode
      :ensure t)
  #+END_SRC
* Dockerfile-mode
  #+BEGIN_SRC emacs-lisp
    (use-package dockerfile-mode
      :ensure t)      
  #+END_SRC
* Doxymacs
  #+BEGIN_SRC emacs-lisp
    (require 'doxymacs)
    (add-hook 'c-mode-common-hook'doxymacs-mode)
  #+END_SRC
* Gist
  #+BEGIN_SRC emacs-lisp
    (use-package gist
      :ensure t)
  #+END_SRC

* Magit
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :init
      (progn
        (bind-key (kbd "<f9>") 'magit-status)))
  #+END_SRC
* Systemd
  #+BEGIN_SRC emacs-lisp
    (use-package systemd
      :ensure t)
  #+END_SRC
* Misc configurations
  #+BEGIN_SRC emacs-lisp
    ;; Disable menu-bar
    (menu-bar-mode -1)

    ;; Disable scroll-bar
    (scroll-bar-mode -1)

    ;; Disable the ring bell
    (setq ring-bell-function 'ignore)

    ;; Highlight cursor line (only in with X gui)
    (when window-system (global-hl-line-mode t))

    ;; Prettify symbols
    (when window-system (global-prettify-symbols-mode t))

    ;; Disable backup files and auto-save
    (setq make-backup-files nil)
    (setq auto-save-default nil)

    ;; Toggle window split
    (defun toggle-window-split ()
      (interactive)
      (if (= (count-windows) 2)
	  (let* ((this-win-buffer (window-buffer))
	     (next-win-buffer (window-buffer (next-window)))
	     (this-win-edges (window-edges (selected-window)))
	     (next-win-edges (window-edges (next-window)))
	     (this-win-2nd (not (and (<= (car this-win-edges)
			 (car next-win-edges))
			 (<= (cadr this-win-edges)
			 (cadr next-win-edges)))))
	     (splitter
	      (if (= (car this-win-edges)
		 (car (window-edges (next-window))))
	      'split-window-horizontally
	    'split-window-vertically)))
	(delete-other-windows)
	(let ((first-win (selected-window)))
	  (funcall splitter)
	  (if this-win-2nd (other-window 1))
	  (set-window-buffer (selected-window) this-win-buffer)
	  (set-window-buffer (next-window) next-win-buffer)
	  (select-window first-win)
	  (if this-win-2nd (other-window 1))))))

    (global-set-key (kbd "C-x |") 'toggle-window-split)

    ;; Auto-fill in all text-mode files
    (add-hook 'text-mode-hook 'turn-on-auto-fill)

    ;; Add warning ban on sudo-edit
    (use-package sudo-edit
      :ensure t
      :config
    (sudo-edit-indicator-mode t))
  #+END_SRC
* Beacon
  #+BEGIN_SRC emacs-lisp
    (use-package beacon
      :ensure t
      :init
      (beacon-mode 1))
  #+END_SRC

* Electric pair
  #+BEGIN_SRC emacs-lisp
    (setq electric-pair-pairs '(
                                (?\( .?\))
                                (?\[ .?\])
                                (?\{ .?\})
                                (?\" .?\")
                                (?\' .?\')
                                ))
    (electric-pair-mode t)
  #+END_SRC
* Hungry-delete
  #+BEGIN_SRC emacs-lisp
    (use-package hungry-delete
      :ensure t
      :config
      (global-hungry-delete-mode)) 
  #+END_SRC
* Rainbow delimiters
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
      :ensure t
      :init
      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
  #+END_SRC
* Expand region
  #+BEGIN_SRC emacs-lisp
    (use-package expand-region
      :ensure t)

    (global-set-key (kbd "C-=") 'er/expand-region)
  #+END_SRC
* PDF tools
  #+BEGIN_SRC emacs-lisp
    (use-package pdf-tools
      :ensure t
      :config
      (pdf-tools-install))

    (use-package org-pdfview
      :ensure t)
  #+END_SRC
* Reload emacs configuration
  #+BEGIN_SRC emacs-lisp
    (defun config-reload ()
      "Reloads ~/.emacs.d/config.org at runtime"
      (interactive)
      (org-babel-load-file (expand-file-name "~/.emacs.d/confinit.org")))
    (global-set-key (kbd "C-c r") 'config-reload)
  #+END_SRC
* Transparent emacs
  #+BEGIN_SRC emacs-lisp
    ;;(set-frame-parameter (selected-frame) 'alpha '(<active> . <inactive>))
    ;;(set-frame-parameter (selected-frame) 'alpha <both>)
    (set-frame-parameter (selected-frame) 'alpha '(92 . 92))
    (add-to-list 'default-frame-alist '(alpha . (92 . 92)))

    (defun toggle-transparency ()
      (interactive)
      (let ((alpha (frame-parameter nil 'alpha)))
	(set-frame-parameter
	 nil 'alpha
	 (if (eql (cond ((numberp alpha) alpha)
			((numberp (cdr alpha)) (cdr alpha))
			;; Also handle undocumented (<active> <inactive>) form.
			((numberp (cadr alpha)) (cadr alpha)))
		  100)
	     '(85 . 50) '(100 . 100)))))
    (global-set-key (kbd "C-c t") 'toggle-transparency)
  #+END_SRC
* Org-ref
  #+begin_src emacs-lisp
    (use-package org-ref
      :ensure t)

    (setq reftex-default-bibliography '("~/Nextcloud/bibliography/references.bib"))

    ;; see org-ref for use of these variables
    (setq org-ref-bibliography-notes "~/Nextcloud/bibliography/notes.org"
	  org-ref-default-bibliography '("~/Nextcloud/bibliography/references.bib")
	  org-ref-pdf-directory "~/Nextcloud/bibliography/bibtex-pdfs/")

    (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -xelatex -f %f"))
  #+end_src
* Elfeed
  #+begin_src emacs-lisp
    ;;functions to support syncing .elfeed between machines
    ;;makes sure elfeed reads index from disk before launching
    (defun bjm/elfeed-load-db-and-open ()
      "Wrapper to load the elfeed db from disk before opening"
      (interactive)
      (elfeed-db-load)
      (elfeed)
      (elfeed-search-update--force))

    ;;write to disk when quiting
    (defun bjm/elfeed-save-db-and-bury ()
      "Wrapper to save the elfeed db to disk before burying buffer"
      (interactive)
      (elfeed-db-save)
      (quit-window))

    (use-package elfeed
      :ensure t
      :config
      (setq elfeed-db-directory "~/Nextcloud/elfeeddb")
      (global-set-key (kbd "C-c f") 'elfeed)
      :bind (:map elfeed-search-mode-map
		  (("q" . bjm/elfeed-save-db-and-bury))))

    (use-package elfeed-org
      :ensure t
      :config
      (elfeed-org)
      (setq rmh-elfeed-org-files (list "~/Nextcloud/elfeed.org")))

    (use-package elfeed-goodies
      :ensure t
      :config
      (elfeed-goodies/setup))

    ;;functions to support syncing .elfeed between machines
    ;;makes sure elfeed reads index from disk before launching
    (defun bjm/elfeed-load-db-and-open ()
      "Wrapper to load the elfeed db from disk before opening"
      (interactive)
      (elfeed-db-load)
      (elfeed)
      (elfeed-search-update--force))

    ;;write to disk when quiting
    (defun bjm/elfeed-save-db-and-bury ()
      "Wrapper to save the elfeed db to disk before burying buffer"
      (interactive)
      (elfeed-db-save)
      (quit-window))
  #+end_src
* Sudo edit 
  #+begin_src emacs-lisp
    (use-package sudo-edit
      :ensure t)
  #+end_src
* JSON moden
#+begin_src emacs-lisp
  (use-package json-mode
    :ensure t)
#+end_src

* shell-here
#+begin_src emacs-lisp
  (use-package shell-here
    :ensure t)
#+end_src
* Avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :config
    (global-set-key (kbd "C-;") 'avy-goto-char)
   )
#+end_src
* Sudo-edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :config
    (sudo-edit-indicator-mode t)
    )
#+end_src
* Eshell
#+BEGIN_SRC emacs-lisp
  (require 'esh-module)
  (add-to-list 'eshell-modules-list 'eshell-tramp)

  (with-eval-after-load "esh-opt"
    (autoload 'epe-theme-lambda "eshell-prompt-extras")
    (setq eshell-highlight-prompt nil
	  eshell-prompt-function 'epe-theme-lambda))
#+END_SRC
* Mermaid
#+BEGIN_SRC emacs-lisp
  (use-package mermaid-mode
    :ensure t)

  (use-package ob-mermaid
    :ensure t
    :config
    (setq ob-mermaid-cli-path "/home/aure/node_modules/.bin/mmdc"))
#+END_SRC
* Doom-modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-icon (display-graphic-p))
    (setq doom-modeline-major-mode-icon t)
    (setq doom-modeline-buffer-state-icon t)
    (setq doom-modeline-buffer-modification-icon t)
   )
#+END_SRC
* Doom-themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t)
#+END_SRC
